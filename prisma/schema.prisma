generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  unverified
  student
  signatory
  staff
  admin
}

enum ClearanceStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  CLEARED
  REJECTED
  SIGNED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?   @unique
  accounts      Account[]
  sessions      Session[]
  role          Role[]    @default([unverified])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student?
  staff     Staff?
  signatory Signatory?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Student {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @unique
  studentNumber String      @unique
  clearances    Clearance[]
  program       Program     @relation(fields: [programId], references: [id])
  programId     String
}

model Staff {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  office   Office @relation(fields: [officeId], references: [id])
  officeId String
}

model Signatory {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  office   Office @relation(fields: [officeId], references: [id])
  officeId String
}

model Office {
  id             String          @id @default(cuid())
  name           String
  staff          Staff[]
  signatory      Signatory[]
  requirements   Requirement[]
  clearanceSteps ClearanceStep[]
  programs       Program[]
}

model Program {
  id       String    @id @default(cuid())
  name     String
  office   Office    @relation(fields: [officeId], references: [id])
  officeId String
  students Student[]
}

model Requirement {
  id           String     @id @default(cuid())
  name         String
  description  String?
  office       Office     @relation(fields: [officeId], references: [id])
  officeId     String
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  semester     Semester   @relation(fields: [semesterId], references: [id])
  semesterId   String
  createdAt    DateTime   @default(now())
}

model SchoolYear {
  id        String     @id @default(cuid())
  startYear Int
  endYear   Int
  semesters Semester[]
  year      String

  Clearance Clearance[]

  Requirement Requirement[]
}

model Semester {
  id           String      @id @default(cuid())
  name         String
  startDate    DateTime
  endDate      DateTime
  schoolYear   SchoolYear  @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  clearances   Clearance[]

  Requirement Requirement[]
}

model Clearance {
  id           String          @id @default(cuid())
  student      Student         @relation(fields: [studentId], references: [id])
  studentId    String
  semester     Semester        @relation(fields: [semesterId], references: [id])
  semesterId   String
  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  status       ClearanceStatus @default(PENDING)
  steps        ClearanceStep[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ClearanceStep {
  id          String          @id @default(cuid())
  clearance   Clearance       @relation(fields: [clearanceId], references: [id])
  clearanceId String
  office      Office          @relation(fields: [officeId], references: [id])
  officeId    String
  status      ClearanceStatus @default(PENDING)
  signedAt    DateTime?
  signedBy    String?
  comments    String?
}

model Report {
  id                     String   @id @default(cuid())
  semesterId             String
  totalStudents          Int
  clearedStudents        Int
  pendingStudents        Int
  rejectedStudents       Int
  generatedAt            DateTime @default(now())
  schoolYear             String
  clearedStudentsList    String[]
  notClearedStudentsList String[]
}
