generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  unverified
  student
  signatory
  staff
  personnel
  admin
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ENROLLED
  GRADUATED
  DROPPED
  SUSPENDED
}

enum ClearanceStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  CLEARED
  REJECTED
  SIGNED
}

enum yearLevel {
  FIRST
  SECOND
  THIRD
  FOURTH
}

enum SemesterStatus {
  NULL
  ONGOING
  FINISHED
}

enum SchoolYearStatus {
  NULL
  ONGOING
  FINISHED
}

enum RequirementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

model User {
  id         String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  email      String  @unique
  image      String?
  password   String
  username   String  @unique

  role Role[] @default([unverified])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student?
  staff     Staff?
  signatory Signatory?
}

model Student {
  id             String        @id @default(cuid())
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?       @unique
  studentId      String        @unique
  firstName      String
  middleName     String?
  lastName       String
  email          String
  phone          String
  address        String?
  dateOfBirth    DateTime?
  gender         Gender
  enrollmentYear Int
  status         StudentStatus @default(ENROLLED)
  clearances     Clearance[]
  program        Program       @relation(fields: [programId], references: [id])
  programId      String
  yearLevel      yearLevel

  // Add the department field derived from the program
  department   Department?          @relation(fields: [departmentId], references: [id])
  departmentId String? // Nullable to indicate it's optional
  requirements StudentRequirement[] // Track individual requirement statuses

  userCreated Boolean @default(false)
  archived    Boolean @default(false)
}

model Staff {
  id           String      @id @default(cuid())
  firstName    String?
  middleName   String?
  lastName     String?
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @unique
  office       Office?     @relation(fields: [officeId], references: [id]) // Can belong to an office
  officeId     String?
  department   Department? @relation(fields: [departmentId], references: [id]) // Can belong to a department
  departmentId String?
}

model Signatory {
  id           String      @id @default(cuid())
  firstName    String?
  middleName   String?
  lastName     String?
  user         User        @relation(fields: [userId], references: [id])
  userId       String      @unique
  office       Office?     @relation(fields: [officeId], references: [id]) // Can belong to an office
  officeId     String?
  department   Department? @relation(fields: [departmentId], references: [id]) // Can belong to a department
  departmentId String?
}

model Program {
  id          String       @id @default(cuid())
  name        String       @unique
  description String
  students    Student[]
  offices     Office[] // Many-to-many relation with Office
  department  Department[] // Relation to Department
}

model Requirement {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  office              Office               @relation(fields: [officeId], references: [id])
  officeId            String
  schoolYear          SchoolYear           @relation(fields: [schoolYearId], references: [id])
  schoolYearId        String
  semester            Semester             @relation(fields: [semesterId], references: [id])
  semesterId          String
  createdAt           DateTime             @default(now())
  generalStatus       RequirementStatus    @default(PENDING) // Overall status for the office
  studentRequirements StudentRequirement[] // Link to student-specific requirements

  Department Department[]
}

model StudentRequirement {
  id            String            @id @default(cuid())
  student       Student           @relation(fields: [studentId], references: [id])
  studentId     String
  requirement   Requirement       @relation(fields: [requirementId], references: [id])
  requirementId String
  status        RequirementStatus @default(PENDING) // Individual status for this student
  submittedAt   DateTime?
  approvedAt    DateTime?
  comments      String? // Optional feedback from the office
}

model SchoolYear {
  id        String     @id @default(cuid())
  startYear Int
  endYear   Int?
  semesters Semester[]
  year      String

  Clearance Clearance[]

  Requirement Requirement[]
  status      SchoolYearStatus @default(NULL)
}

model Semester {
  id           String      @id @default(cuid())
  name         String
  startDate    DateTime?
  endDate      DateTime?
  schoolYear   SchoolYear  @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  clearances   Clearance[]

  Requirement Requirement[]
  status      SemesterStatus @default(NULL)
}

model Clearance {
  id           String          @id @default(cuid())
  student      Student         @relation(fields: [studentId], references: [id])
  studentId    String
  semester     Semester        @relation(fields: [semesterId], references: [id])
  semesterId   String
  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  status       ClearanceStatus @default(PENDING)
  steps        ClearanceStep[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ClearanceStep {
  id           String          @id @default(cuid())
  clearance    Clearance       @relation(fields: [clearanceId], references: [id])
  clearanceId  String
  office       Office?         @relation(fields: [officeId], references: [id]) // Step linked to an office
  officeId     String?
  department   Department?     @relation(fields: [departmentId], references: [id]) // Step linked to a department
  departmentId String?
  status       ClearanceStatus @default(PENDING)
  signedAt     DateTime?
  signedBy     String?
  comments     String?
}

model Report {
  id                     String   @id @default(cuid())
  semesterId             String
  totalStudents          Int
  clearedStudents        Int
  pendingStudents        Int
  rejectedStudents       Int
  generatedAt            DateTime @default(now())
  schoolYear             String
  clearedStudentsList    String[]
  notClearedStudentsList String[]
}

model Department {
  id            String          @id @default(cuid())
  name          String          @unique
  programs      Program[] // Relation to the Program model
  staff         Staff[] // Staff related to the department
  signatory     Signatory[] // Signatories related to the department
  requirements  Requirement[] // Requirements related to the department
  ClearanceStep ClearanceStep[]
  students      Student[] // Track students belonging to the department
}

model Office {
  id             String          @id @default(cuid())
  name           String          @unique
  programs       Program[] // Many-to-many relation with Program
  staff          Staff[]
  signatory      Signatory[]
  requirements   Requirement[]
  clearanceSteps ClearanceStep[]
}
