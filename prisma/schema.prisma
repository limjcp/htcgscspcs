generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  unverified
  student
  signatory
  staff
  personnel
  admin
  dean
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum StudentStatus {
  ENROLLED
  GRADUATED
  DROPPED
  SUSPENDED
}

enum ClearanceStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  CLEARED
  REJECTED
  SIGNED
}

enum SemesterStatus {
  NULL
  ONGOING
  FINISHED
}

enum SchoolYearStatus {
  NULL
  ONGOING
  FINISHED
}

enum RequirementStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

model User {
  id         String  @id @default(cuid())
  firstName  String
  middleName String?
  lastName   String
  email      String  @unique
  image      String?
  password   String
  username   String  @unique

  role Role[] @default([unverified])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  student   Student?
  staff     Staff?
  signatory Signatory?

  Appointment Appointment[]
}

model Student {
  id                   String        @id @default(cuid())
  user                 User?         @relation(fields: [userId], references: [id])
  userId               String?       @unique
  studentId            String        @unique
  firstName            String
  middleName           String?
  lastName             String
  email                String
  phone                String
  address              String?
  dateOfBirth          DateTime?
  gender               Gender
  enrollmentYear       SchoolYear    @relation(fields: [enrollmentYearId], references: [id])
  enrollmentYearId     String
  enrollmentSemester   Semester      @relation(fields: [enrollmentSemesterId], references: [id])
  enrollmentSemesterId String
  status               StudentStatus @default(ENROLLED)
  clearances           Clearance[]
  program              Program       @relation(fields: [programId], references: [id])
  programId            String

  // Add the department field derived from the program
  department   Department?          @relation(fields: [departmentId], references: [id])
  departmentId String? // Nullable to indicate it's optional
  requirements StudentRequirement[] // Track individual requirement statuses

  userCreated Boolean @default(false)
  archived    Boolean @default(false)
}

model Staff {
  id           String  @id @default(cuid())
  firstName    String?
  middleName   String?
  lastName     String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
  office       Office? @relation(fields: [officeId], references: [id]) // Can belong to an office
  officeId     String?
  departmentId String?

  Department Department[]
}

model Signatory {
  id            String  @id @default(cuid())
  firstName     String?
  middleName    String?
  lastName      String?
  user          User    @relation(fields: [userId], references: [id])
  userId        String  @unique
  office        Office? @relation(fields: [officeId], references: [id]) // Can belong to an office
  officeId      String?
  departmentId  String?
  isProgramHead Boolean @default(false) // Mark as Program Head for a department

  Department Department[] @relation(name: "ProgramHead")
}

model Program {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  students    Student[]

  department   Department? @relation(fields: [departmentId], references: [id])
  departmentId String?
}

model Requirement {
  id                  String               @id @default(cuid())
  name                String
  description         String?
  office              Office?              @relation(fields: [officeId], references: [id])
  officeId            String?
  schoolYear          SchoolYear           @relation(fields: [schoolYearId], references: [id])
  schoolYearId        String
  semester            Semester             @relation(fields: [semesterId], references: [id])
  semesterId          String
  createdAt           DateTime             @default(now())
  generalStatus       RequirementStatus    @default(PENDING) // Overall status for the office
  studentRequirements StudentRequirement[] // Link to student-specific requirements

  department   Department? @relation(fields: [departmentId], references: [id]) // Step linked to a department
  departmentId String?
}

model StudentRequirement {
  id            String            @id @default(cuid())
  student       Student           @relation(fields: [studentId], references: [id])
  studentId     String
  requirement   Requirement       @relation(fields: [requirementId], references: [id])
  requirementId String
  status        RequirementStatus @default(PENDING) // Individual status for this student
  submittedAt   DateTime?
  approvedAt    DateTime?
  comments      String? // Optional feedback from the office
}

model SchoolYear {
  id        String     @id @default(cuid())
  startYear Int
  endYear   Int?
  semesters Semester[]
  year      String

  Clearance Clearance[]

  Requirement Requirement[]
  status      SchoolYearStatus @default(NULL)

  Student Student[]
}

model Semester {
  id           String      @id @default(cuid())
  name         String
  startDate    DateTime?
  endDate      DateTime?
  schoolYear   SchoolYear  @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  clearances   Clearance[]

  Requirement Requirement[]
  status      SemesterStatus @default(NULL)

  Student Student[]
}

model Clearance {
  id           String          @id @default(cuid())
  student      Student         @relation(fields: [studentId], references: [id])
  studentId    String
  semester     Semester        @relation(fields: [semesterId], references: [id])
  semesterId   String
  schoolYear   SchoolYear      @relation(fields: [schoolYearId], references: [id])
  schoolYearId String
  status       ClearanceStatus @default(PENDING)
  steps        ClearanceStep[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model ClearanceStep {
  id           String          @id @default(cuid())
  clearance    Clearance       @relation(fields: [clearanceId], references: [id])
  clearanceId  String
  office       Office?         @relation(fields: [officeId], references: [id]) // Step linked to an office
  officeId     String?
  department   Department?     @relation(fields: [departmentId], references: [id]) // Step linked to a department
  departmentId String?
  status       ClearanceStatus @default(PENDING)
  signedAt     DateTime?
  signedBy     String?
  comments     String?
}

model Report {
  id                     String   @id @default(cuid())
  semesterId             String
  totalStudents          Int
  clearedStudents        Int
  pendingStudents        Int
  rejectedStudents       Int
  generatedAt            DateTime @default(now())
  schoolYear             String
  clearedStudentsList    String[]
  notClearedStudentsList String[]
}

model Department {
  id                 String        @id @default(cuid())
  name               String        @unique
  description        String        @default("no description")
  programs           Program[] // Relation to the Program model
  programHead        Signatory?    @relation(name: "ProgramHead", fields: [programHeadId], references: [id]) // Assign one Program Head per department
  programHeadId      String?
  programPresident   Staff?        @relation(fields: [programPresidentId], references: [id])
  programPresidentId String?
  requirements       Requirement[]
  students           Student[] // Track students belonging to the department

  ClearanceStep ClearanceStep[]

  Appointment Appointment[]

  Office Office[] @relation("DepartmentOffices, references: [id]") // Many-to-many relation with Program
}

model Office {
  id   String @id @default(cuid())
  name String @unique

  staff          Staff[]
  signatory      Signatory[]
  requirements   Requirement[]
  clearanceSteps ClearanceStep[]

  // New relation for dependencies
  dependentOn  OfficeDependency[] @relation("Dependency") // Office dependencies
  dependencies OfficeDependency[] @relation("Dependent")

  Appointment Appointment[]

  Department Department[] @relation("DepartmentOffices, references: [id]")
}

model OfficeDependency {
  id          String @id @default(cuid())
  dependentId String
  dependent   Office @relation("Dependency", fields: [dependentId], references: [id])

  requiredId String
  required   Office @relation("Dependent", fields: [requiredId], references: [id])
}

model Appointment {
  id              Int       @id @default(autoincrement())
  userId          String // References the personnel user (staff or signatory)
  officeId        String? // References the assigned office
  departmentId    String? // References the assigned department
  appointmentDate DateTime // Date the personnel was assigned
  resignationDate DateTime? // Date the personnel resigned or was unassigned

  user       User        @relation(fields: [userId], references: [id])
  office     Office?     @relation(fields: [officeId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])

  @@unique([userId, officeId, departmentId]) // Ensures unique appointment per office/department
}

model ClearanceLog {
  id          String   @id @default(cuid())
  schoolYear  String
  semester    String
  generatedAt DateTime @default(now())
}
